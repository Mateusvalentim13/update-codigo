import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
from io import StringIO, BytesIO
import csv
from datetime import time
import base64
from PIL import Image

 # region encoded_image
encoded_image = ( "")
# endregion



USUARIOS = {
    "mateusvalentim": "1234",
    "tecnico": "senha123",
    "isasilva": "4321"
}

def tela_login():
    # Espaço no topo
    st.markdown("<br><br><br>", unsafe_allow_html=True)

    # Criar colunas para centralizar
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        # Exibir logo
        try:
            image_data = base64.b64decode(encoded_image)
            image = Image.open(BytesIO(image_data))
            st.image(image, width=400)
        except Exception as e:
            st.warning("⚠️ Erro ao carregar a imagem.")
            st.text(f"Detalhes: {e}")

        # Formulário de login
        st.markdown("## 🔐 Login")
        st.write("Entre com suas credenciais para continuar.")

        with st.form("form_login"):
            usuario = st.text_input("Usuário", placeholder="Digite seu usuário")
            senha = st.text_input("Senha", type="password", placeholder="Digite sua senha")
            entrar = st.form_submit_button("Entrar")

            if entrar:
                if usuario in USUARIOS and USUARIOS[usuario] == senha:
                    st.session_state["logado"] = True
                    st.session_state["usuario"] = usuario
                    st.success(f"✅ Bem-vindo, {usuario}!")
                    st.rerun()
                else:
                    st.error("❌ Usuário ou senha inválidos.")



# Inicializa estado da sessão
if "logado" not in st.session_state:
    st.session_state["logado"] = False

# Verifica se logado
if not st.session_state["logado"]:
    tela_login()
    st.stop()

# -------------------------------
# Resto do seu código original abaixo (como já existente)
# -------------------------------

# Configuração da página
st.set_page_config(page_title="Analisador .DAT", layout="wide")

# Exibir logo codificada em base64 (logotipo TecWise)
encoded_image = (
    ""
)

try:
    image_data = base64.b64decode(encoded_image)
    image = Image.open(BytesIO(image_data))
    st.image(image, width=300)
except Exception as e:
    st.warning("⚠️ Erro ao carregar a imagem. Verifique a string base64.")
    st.text(f"Detalhes: {e}")

# Inicializar estado para rastrear o número de falhas
if 'ultima_contagem_falhas' not in st.session_state:
    st.session_state['ultima_contagem_falhas'] = 0

# Navegação por abas
abas = st.tabs(["📁 Arquivos", "🔋 Bateria", "🟥 Falhas & Patamar", "📤 Exportação", "🔁Dados Repetidos", "⏰Data e Hora", "📶 Nível de sinal"])

# Configurações na barra lateral
with abas[0]:
    st.sidebar.title("ANÁLISE DE SAÚDE DOS INSTRUMENTOS - TecWise")
    arquivos = st.sidebar.file_uploader("Selecione os arquivos .DAT", type=["dat"], accept_multiple_files=True)
    chart_type = st.sidebar.radio("Tipo de gráfico (bateria)", ["Linha"], index=0)
    hora_inicio = st.sidebar.time_input("Hora de início", value=time(0, 0))
    hora_fim = st.sidebar.time_input("Hora de fim", value=time(23, 59))
    limiar_variacao = st.sidebar.number_input("Limiar de variação percentual (%)", min_value=1.0, max_value=100.0, value=10.0, step=0.5) / 100

    #st.markdown("Use a barra lateral para carregar os arquivos e configurar os filtros.")

# Funções de estilização
def destacar_qtd_leituras(val):
    try:
        if float(val) == 0:
            return ""
        return "background-color: orange; color: black"
    except:
        return ""
    
def detectar_erros_temporais(df_total):
    erros = []

    if 'timestamp' not in df_total.columns or 'arquivo_origem' not in df_total.columns:
        return pd.DataFrame()

    arquivos = df_total['arquivo_origem'].unique()

    for arquivo in arquivos:
        df_arquivo = df_total[df_total['arquivo_origem'] == arquivo].copy()
        df_arquivo = df_arquivo[['timestamp']].dropna().reset_index(drop=True)
        df_arquivo['timestamp'] = pd.to_datetime(df_arquivo['timestamp'], errors='coerce')

        for i in range(1, len(df_arquivo)):
            if df_arquivo['timestamp'].iloc[i] < df_arquivo['timestamp'].iloc[i - 1]:
                erros.append({
                    'Arquivo': arquivo,
                    'Linha': i,
                    'Timestamp anterior': df_arquivo['timestamp'].iloc[i - 1],
                    'Timestamp atual': df_arquivo['timestamp'].iloc[i]
                })

    return pd.DataFrame(erros)


        
    campos_bateria = [col for col in df.columns if col.endswith('_batteryvoltage')]
    instrumentos = list({col.split('_')[0] for col in campos_bateria})

    for instrumento in instrumentos:
        col_bateria = f"{instrumento}_batteryvoltage"
        if col_bateria in df.columns:
            df_inst = df[['timestamp', col_bateria]].copy().dropna()
            df_inst = df_inst.sort_values(by='timestamp').reset_index(drop=True)
            diffs = df_inst['timestamp'].diff()

            for i in range(1, len(diffs)):
                if diffs.iloc[i].total_seconds() < 0:
                    erros.append({
                        'Instrumento': instrumento,
                        'Timestamp atual': df_inst.iloc[i]['timestamp'],
                        'Timestamp anterior': df_inst.iloc[i - 1]['timestamp']
                    })

    return pd.DataFrame(erros)


def destacar_mudanca(val):
    try:
        if pd.isna(val):
            return ""
        elif float(val) == 0:
            return "background-color: yellow; color: black"
        return "background-color: #54e346; color: black"
    except:
        return ""

def destacar_falhas(val):
    try:
        if float(val) == -999:
            return "background-color: yellow; color: black"
    except:
        pass
    return ""

# Função para processar arquivos .DAT
def processar_dat(arquivo):
    try:
        texto = arquivo.read().decode("utf-8", errors='ignore')
        f = StringIO(texto)
        linhas = list(csv.reader(f, delimiter=','))
        linha_colunas_idx = None
        for i, linha in enumerate(linhas[:15]):
            if any("timestamp" in c.lower() for c in linha):
                linha_colunas_idx = i
                break

        if linha_colunas_idx is None:
            st.error(f"❌ Cabeçalho com 'timestamp' não encontrado no arquivo: `{arquivo.name}`.")
            return pd.DataFrame()

        colunas = [c.strip().lower() for c in linhas[linha_colunas_idx]]
        dados = linhas[linha_colunas_idx + 1:]
        dados_validos = [linha for linha in dados if len(linha) == len(colunas)]
        if len(dados_validos) < len(dados):
            st.warning(f"{len(dados) - len(dados_validos)} linhas descartadas por inconsistência em `{arquivo.name}`.")

        df = pd.DataFrame(dados_validos, columns=colunas)
        df['arquivo_origem'] = arquivo.name

        if 'timestamp' in df.columns:
            df['timestamp'] = pd.to_datetime(df['timestamp'], errors='coerce')

        return df
    except Exception as e:
        st.error(f"❌ Erro ao processar `{arquivo.name}`: {e}")
        return pd.DataFrame()

# Carregar e processar os arquivos
df_total = pd.DataFrame()
if arquivos:
    for arquivo in arquivos:
        df = processar_dat(arquivo)
        if not df.empty:
            df_total = pd.concat([df_total, df], ignore_index=True)

if not arquivos:
    st.markdown("<h4 style='padding-top: 2rem;'>Use a barra lateral para carregar os arquivos e configurar os filtros.</h4>", unsafe_allow_html=True)

# Filtrar dados por data e hora
if not df_total.empty and 'timestamp' in df_total.columns:
    df_total['timestamp'] = pd.to_datetime(df_total['timestamp'], errors='coerce')
    df_total = df_total.dropna(subset=['timestamp'])
    data_min = df_total['timestamp'].min().date()
    data_max = df_total['timestamp'].max().date()
    data_inicio = st.sidebar.date_input("Data de início", value=data_min, min_value=data_min, max_value=data_max)
    data_fim = st.sidebar.date_input("Data de fim", value=data_max, min_value=data_min, max_value=data_max)
    filtro_data_inicial = pd.to_datetime(f"{data_inicio} {hora_inicio}")
    filtro_data_final = pd.to_datetime(f"{data_fim} {hora_fim}")
    df_total = df_total[(df_total['timestamp'] >= filtro_data_inicial) & (df_total['timestamp'] <= filtro_data_final)]

    # Aba "Arquivos"
    with abas[0]:
        st.subheader("📁 Arquivos Carregados")
        st.write(df_total['arquivo_origem'].unique().tolist())

    # Aba "Bateria"
    campos_bateria = [c for c in df_total.columns if 'battery' in c.lower()]
    if campos_bateria:
        with abas[1]:
            st.subheader("🔋 Verificação de Bateria")
            resumo_bateria = []
            for campo in campos_bateria:
                df_total[campo] = pd.to_numeric(df_total[campo], errors='coerce')
                validos = df_total[campo][df_total[campo] != -999]
                alerta = ((validos < 3.45) & (validos >= 3.3)).sum()
                critico = (validos < 3.3).sum()
                resumo_bateria.append({
                    "Campo de Bateria": campo,
                    "Leituras < 3.45V": alerta,
                    "Leituras < 3.3V": critico
                })
            resumo_bateria_df = pd.DataFrame(resumo_bateria)
            bateria_style = resumo_bateria_df.style.format(precision=0).applymap(destacar_qtd_leituras, subset=["Leituras < 3.45V"]).applymap(destacar_qtd_leituras, subset=["Leituras < 3.3V"])
            st.dataframe(bateria_style, use_container_width=True)

            with st.expander("📈 Gráficos e Métricas de Bateria"):
                busca_bateria = st.text_input("🔍 Buscar instrumento de bateria:")
                campos_filtrados = [c for c in campos_bateria if busca_bateria.lower() in c.lower()] if busca_bateria else campos_bateria
                if not campos_filtrados:
                    st.info("Nenhum campo de bateria corresponde à busca.")
                else:
                    for campo in campos_filtrados:
                        fig = go.Figure()
                        df_bat = df_total[df_total[campo] != -999]
                        fig.add_trace(go.Scatter(x=df_bat['timestamp'], y=df_bat[campo],
                                                 mode='lines' if chart_type == "Linha" else 'markers',
                                                 name=campo,
                                                 line=dict(color='lightblue')))
                        fig.add_hline(y=3.45, line=dict(color="orange", dash="dash"), annotation_text="Alerta (3.45V)", annotation_position="top left")
                        fig.add_hline(y=3.3, line=dict(color="red", dash="dash"), annotation_text="Crítico (3.3V)", annotation_position="bottom left")
                        fig.update_layout(title=campo, xaxis_title="Timestamp", yaxis_title="Tensão (V)", height=400)
                        st.plotly_chart(fig, use_container_width=True)

        # Aba "Falhas & Patamar"
        col_digit_cols = [col for col in df_total.columns if col.lower().endswith(('_digit', '_hz'))]
        for col in col_digit_cols:
            df_total[col] = pd.to_numeric(df_total[col], errors='coerce')
            falhas_mask = df_total[col] == -999


    if 'col_digit_cols' in locals() and col_digit_cols:
        with abas[2]:
            # Depuração para verificar valores únicos
            with st.expander("🔍 Depuração: Valores Únicos nas Colunas"):
                for col in col_digit_cols:
                    st.write(f"Valores únicos em {col}: {df_total[col].unique()}")

            # Inicializar DataFrames para falhas e mudanças de patamar
            df_falhas = pd.DataFrame()
            df_patamar = pd.DataFrame()
            total_lacunas = 0
            instrumentos_Disponibilidade = {}

            for col in col_digit_cols:
                # Garantir que os valores sejam numéricos
                df_total[col] = pd.to_numeric(df_total[col], errors='coerce')
                # Identificar falhas (-999)
                falhas_mask = df_total[col] == -999
                total_lacunas += falhas_mask.sum()

                # Criar DataFrame de falhas
                falhas = df_total[falhas_mask][['timestamp', col, 'arquivo_origem']].copy()
                if not falhas.empty:
                    falhas['coluna'] = col
                    df_falhas = pd.concat([df_falhas, falhas], ignore_index=True)

                # Calcular mudanças de patamar
                series_valida = df_total[col].replace(-999, np.nan)
                pct_change = series_valida.pct_change().abs()
                df_total[f'mudanca_patamar_{col}'] = pct_change > limiar_variacao

                mudancas = df_total[(df_total[f'mudanca_patamar_{col}']) & (df_total[col] != -999)][['timestamp', col, 'arquivo_origem']].copy()
                mudancas['coluna'] = col
                df_patamar = pd.concat([df_patamar, mudancas], ignore_index=True)

                instrumentos_Disponibilidade[col] = (falhas_mask.sum() / len(df_total)) * 100

            disponibilidade = 100 - (total_lacunas / len(df_total) * 100)

            # Alerta para novas falhas
            nova_contagem_falhas = total_lacunas
            if nova_contagem_falhas > st.session_state['ultima_contagem_falhas']:
                novas_falhas = nova_contagem_falhas - st.session_state['ultima_contagem_falhas']
                st.warning(f"🚨 {novas_falhas} nova(s) falha(s) de comunicação (-999) detectada(s)!")
            st.session_state['ultima_contagem_falhas'] = nova_contagem_falhas

            # Seção de Falhas
            st.markdown("### 🟥 Falhas de Comunicação (-999)")

            # Filtro para exibir apenas falhas ou todas as linhas
            filtro_falhas = st.selectbox("Filtrar dados:", ["Apenas falhas (-999)", "Todas as linhas"], key="filtro_falhas")

            linhas_por_pagina_falha = st.slider("Linhas por página (Falhas)", 10, 200, 100, step=10)
            pagina_atual_falha = st.number_input("Página (Falhas)", min_value=1, value=1, step=1, key="falha_page")
            inicio_falha = (pagina_atual_falha - 1) * linhas_por_pagina_falha
            fim_falha = inicio_falha + linhas_por_pagina_falha

            # Preparar DataFrame para exibição de falhas
            df_display_final = pd.DataFrame()
            colunas_digit = [col for col in df_total.columns if col.lower().endswith(('_digit', '_hz'))]

            if colunas_digit:
                # Selecionar colunas relevantes e garantir que sejam numéricas
                df_para_exibir = df_total[['timestamp'] + colunas_digit].copy() #
                for col in colunas_digit:
                    df_para_exibir[col] = pd.to_numeric(df_para_exibir[col], errors='coerce') #

                # Ordenar por timestamp
                df_para_exibir = df_para_exibir.sort_values(by='timestamp').reset_index(drop=True) #

                if filtro_falhas == "Apenas falhas (-999)": #
                    # 1. Filtrar linhas que contêm PELO MENOS UM -999
                    mask_falha_linha = df_para_exibir[colunas_digit].eq(-999).any(axis=1) #
                    df_com_falhas = df_para_exibir[mask_falha_linha] #

                    if not df_com_falhas.empty:
                        # 2. Identificar colunas que têm PELO MENOS UM -999 nessas linhas filtradas
                        colunas_com_falha_real = ['timestamp'] #
                        for col in colunas_digit:
                            # Verificar se a coluna existe e se tem algum -999 após a filtragem de linha
                            if col in df_com_falhas.columns and df_com_falhas[col].eq(-999).any(): #
                                colunas_com_falha_real.append(col) #

                        # 3. Selecionar apenas essas colunas do DataFrame filtrado por linha
                        #    E remover duplicatas de timestamp (mantém a primeira ocorrência)
                        df_display_final = df_com_falhas[colunas_com_falha_real].drop_duplicates(subset=['timestamp'], keep='first').reset_index(drop=True) #
                    else:
                        # DataFrame vazio se nenhuma falha encontrada após filtrar linhas
                        df_display_final = pd.DataFrame(columns=['timestamp'])

                else: # "Todas as linhas"
                    # Usar todas as linhas e colunas _digit, remover duplicatas de timestamp
                    df_display_final = df_para_exibir[['timestamp'] + colunas_digit].drop_duplicates(subset=['timestamp'], keep='first').reset_index(drop=True) #

            # Exibir DataFrame resultante
            if not df_display_final.empty:
                # Pegar a página atual para exibição e preencher NaNs com string vazia
                df_display_paginado = df_display_final.iloc[inicio_falha:fim_falha].fillna('') #

                # Aplicar estilo
                try:
                    # Formata números, tratando -999 como inteiro e outros floats com 3 casas decimais
                    estilo_falhas = df_display_paginado.style.format( #
                        lambda x: f"{x:.3f}".rstrip("0").rstrip(".") if isinstance(x, (float, np.number)) and pd.notna(x) and x != -999 else (int(x) if isinstance(x, (float, np.number)) and x == -999 else x)
                    ).applymap(destacar_falhas) # Aplica o destaque amarelo para -999 #
                    st.dataframe(estilo_falhas, use_container_width=True) #
                except Exception as e:
                    st.error(f"Erro ao aplicar estilo: {e}")
                    st.dataframe(df_display_paginado, use_container_width=True) # Fallback para dataframe sem estilo

                # Informações de paginação
                total_linhas_filtradas = len(df_display_final)
                total_paginas = (total_linhas_filtradas // linhas_por_pagina_falha) + (1 if total_linhas_filtradas % linhas_por_pagina_falha > 0 else 0)
                total_paginas = max(1, total_paginas) # Garante pelo menos 1 página
                st.caption(f"Página {min(pagina_atual_falha, total_paginas)} de {total_paginas} ({total_linhas_filtradas} linhas no total)")

            elif filtro_falhas == "Apenas falhas (-999)": #
                st.info("Nenhuma falha de comunicação (-999) encontrada.") #
            else:
                st.info("Nenhum dado para exibir com os filtros atuais.")

            # Seção de Mudança de Patamar
            st.markdown(f"### 🟧 Mudança de Patamar (> {limiar_variacao * 100:.1f}%)") #
            colunas_valores = [col for col in df_patamar.columns if col not in ["timestamp", "arquivo_origem", "coluna"]] #
            df_patamar_filtrado = df_patamar.copy() #
            # Substituir -999 por NaN antes de verificar NaNs para patamar
            for col_val in colunas_valores:
                 if col_val in df_patamar_filtrado.columns:
                      df_patamar_filtrado[col_val] = pd.to_numeric(df_patamar_filtrado[col_val], errors='coerce').replace(-999, np.nan) #

            df_patamar_filtrado = df_patamar_filtrado.dropna(subset=colunas_valores, how='all') # Remove linhas onde todas as colunas de valor são NaN (eram -999 ou não numéricas) #

            linhas_por_pagina = st.slider("Linhas por página (Mudança de Patamar)", 10, 200, 100, step=10, key="patamar_slider") #
            pagina_atual = st.number_input("Página (Mudança de Patamar)", min_value=1, value=1, step=1, key="patamar_page") #
            inicio = (pagina_atual - 1) * linhas_por_pagina
            fim = inicio + linhas_por_pagina
            # Remove colunas auxiliares e duplicatas de timestamp antes de exibir
            df_patamar_display = df_patamar_filtrado.drop(columns=["arquivo_origem", "coluna"], errors='ignore').copy() #
            df_patamar_display = df_patamar_display.drop_duplicates(subset=['timestamp'], keep='first').reset_index(drop=True) #

            if not df_patamar_display.empty:
                 df_patamar_paginado = df_patamar_display.iloc[inicio:fim].fillna('') #
                 try:
                      estilo_patamar = df_patamar_paginado.style.format( #
                           lambda x: f"{x:.3f}".rstrip("0").rstrip(".") if isinstance(x, (float, np.number)) and pd.notna(x) else x
                      ).applymap(destacar_mudanca) # Função destacar_mudanca precisa existir e funcionar #
                      st.dataframe(estilo_patamar, use_container_width=True) #
                 except Exception as e:
                      st.error(f"Erro ao aplicar estilo de patamar: {e}")
                      st.dataframe(df_patamar_paginado, use_container_width=True) # Fallback

                 # Informações de paginação para Patamar
                 total_linhas_patamar = len(df_patamar_display)
                 total_paginas_patamar = (total_linhas_patamar // linhas_por_pagina) + (1 if total_linhas_patamar % linhas_por_pagina > 0 else 0)
                 total_paginas_patamar = max(1, total_paginas_patamar)
                 st.caption(f"Página {min(pagina_atual, total_paginas_patamar)} de {total_paginas_patamar} ({total_linhas_patamar} linhas no total)")
            else:
                 st.info(f"Nenhuma mudança de patamar significativa (> {limiar_variacao * 100:.1f}%) encontrada.")


            # Seção de Disponibilidade
            st.markdown("### 📉 Disponibilidade (%)") #
            st.table(pd.DataFrame({ #
                "Total Leituras": [len(df_total)], #
                "Falhas (-999)": [total_lacunas], #
                "Disponibilidade (%)": [f"{disponibilidade:.2f}%" if len(df_total) > 0 else "N/A"] # Evita divisão por zero #
            }))

            # Detalhamento por Instrumento
            with st.expander("📊 Detalhamento por Instrumento"): #
                ordem = st.selectbox("Ordenar por:", ["Maior porcentagem", "Menor porcentagem"]) #
                filtro_busca = st.text_input("🔍 Buscar instrumento:") #
                df_indisp = pd.DataFrame(instrumentos_Disponibilidade.items(), columns=["Instrumento", "Disponibilidade (%)"]) #
                if filtro_busca: #
                    df_indisp = df_indisp[df_indisp["Instrumento"].str.contains(filtro_busca, case=False)] #
                df_indisp = df_indisp.sort_values(by="Disponibilidade (%)", ascending=(ordem == "Menor porcentagem")) #
                # Exibir como tabela para melhor alinhamento
                st.dataframe(df_indisp.style.format({"Disponibilidade (%)": "{:.2f}%"}), use_container_width=True) #

    # Aba "Exportação"
    with abas[3]:
        st.subheader("📄 Dados e Exportação")
        st.dataframe(df_total, use_container_width=True)
        exportar_csv = st.button("Exportar Dados")
        if exportar_csv:
            csv_data = df_total.to_csv(index=False)
            st.download_button(
                label="Baixar CSV",
                data=csv_data,
                file_name="dados.csv",
                mime="text/csv"
            )
            
    #Aba "Data e Hora"
    
with abas[5]:  # índice 5 corresponde à 6ª aba ("⏰ Data e Hora")
    st.subheader("⏰ Verificação de Consistência Temporal")
    df_erros_temporais = detectar_erros_temporais(df_total)

    if not df_erros_temporais.empty:
        st.warning("⚠️ Foram encontrados registros com timestamps fora de ordem cronológica.")
        st.dataframe(df_erros_temporais, use_container_width=True)
    else:
        st.success("✅ Todos os timestamps estão em ordem cronológica esperada.")


# Aba "Dados Repetidos"
with abas[4]:  # índice 4 corresponde à 5ª aba (🔁 Dados Repetidos)
    st.subheader("🔁 Leituras Repetidas")

    if not df_total.empty:
        # Selecionar colunas numéricas válidas
        colunas_leitura = [
            col for col in df_total.columns
            if col not in ['timestamp', 'arquivo_origem']
            and pd.api.types.is_numeric_dtype(df_total[col])
        ]
        colunas_validas = ['timestamp'] + colunas_leitura

        # Criar cópia com os campos relevantes
        df_check = df_total[colunas_validas].copy()
        df_check[colunas_leitura] = df_check[colunas_leitura].apply(pd.to_numeric, errors='coerce').round(4)

        # ❌ Remover qualquer linha que contenha -999
        df_check = df_check[~df_check[colunas_leitura].eq(-999).any(axis=1)]

        # Agrupar
        repeticoes = df_check.groupby(colunas_validas).size().reset_index(name='Ocorrências')
        repetidos = repeticoes[repeticoes['Ocorrências'] >= 3]

        if not repetidos.empty:
            st.success(f"🔁 {len(repetidos)} conjunto(s) de leitura repetida encontrado(s).")
            
            # ✅ Aqui você insere o trecho desejado:
            colunas_para_mostrar = [col for col in repetidos.columns if col != 'Ocorrências']
            st.dataframe(repetidos[colunas_para_mostrar + ['Ocorrências']], use_container_width=True)

        else:
            st.info("✅ Nenhuma leitura duplicada.")
    else:
        st.info("Nenhum dado carregado para análise.")

